{
  "epics": [
    {
      "title": "Epic: CR §100–104 — General, Players, Setup, and Game Start (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR"],
      "body": {
        "summary": "Implement foundational game scaffolding: player identities, starting life totals (Commander), deck validation hooks, opening hands, mulligans (Commander/Vancouver), and game-start procedures per CR §100–104 (CR 2025-09-19).",
        "hypothesis": "If we implement deterministic game setup per CR §100–104, we can produce reproducible seeds and valid Commander game initial states.",
        "success_metrics": "- Deterministic initial state from fixed seed\n- 100% pass on golden tests for mulligan & start sequence\n- Decklist validator integrates with CardIR",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: ADR—State Model v1\n- Link: CCR—CardIR v1",
        "dor": "- Commander assumptions captured\n- Test seeds specified\n- Deck constraints defined",
        "dod": [
          "Setup FSM implemented",
          "Golden tests added to CI",
          "Docs updated (setup sequence)"
        ]
      }
    },
    {
      "title": "Epic: CR §105–110 — Core Concepts: Colors, Mana, Numbers/Symbols, Cards & Objects (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR"],
      "body": {
        "summary": "Represent colors, color identity (Commander relevance), mana system primitives, symbols, card/object identities and zones needed across the engine.",
        "hypothesis": "A normalized representation of colors/mana/symbols/objects enables consistent parsing, evaluation, and replay serialization.",
        "success_metrics": "- Color identity check passes on 100 sample decks\n- Mana pool ops deterministic under concurrency tests\n- Symbols fully parsed into CardIR",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Scryfall ETL\n- Link: CardIR schema",
        "dor": "- Symbol taxonomy draft\n- Mana operations cataloged",
        "dod": [
          "CardIR supports symbols",
          "Color identity validator exposed",
          "Unit tests for mana ops"
        ]
      }
    },
    {
      "title": "Epic: CR §111–116 — Zones, Ownership/Control, Deck/Library/Graveyard, and Public/Hidden Information (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR"],
      "body": {
        "summary": "Model zones (library, hand, battlefield, graveyard, exile, command zone), object movement rules, and information visibility for multiplayer Commander.",
        "hypothesis": "Accurate zone transitions and visibility flags are prerequisites for legal action generation and fair agent observations.",
        "success_metrics": "- Zone transition table covers ≥95% sampled events\n- Observation masks match visibility rules in tests\n- Command zone semantics implemented",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Observation spec\n- Link: Replay schema",
        "dor": "- Zone graph defined\n- Visibility cases listed",
        "dod": [
          "Zone transitions table-driven",
          "Observer masks implemented",
          "Commander command zone rules tested"
        ]
      }
    },
    {
      "title": "Epic: CR §117 — Timing and Priority (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Priority"],
      "body": {
        "summary": "Implement the priority system, timing windows, and pass cycles for multiplayer priority including active/non-active player ordering.",
        "hypothesis": "Correct priority passing is essential for stack interaction fidelity and multiplayer fairness.",
        "success_metrics": "- Pass-cycle simulations match CR examples\n- No illegal timing actions admitted in tests\n- Deterministic resolution of APNAP conflicts",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Turn structure epic\n- Link: Stack epic",
        "dor": "- Multiplayer timing matrix drafted",
        "dod": [
          "Priority FSM implemented",
          "APNAP ordering enforced",
          "Golden tests for pass cycles"
        ]
      }
    },
    {
      "title": "Epic: CR §200–211 — Parts of a Turn, Steps & Phases (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Turn"],
      "body": {
        "summary": "Model full turn structure: untap, upkeep, draw, main, beginning/end of combat, combat steps, second main, end/cleanup with triggers and checks.",
        "hypothesis": "A step/phase scheduler with hook points enables features to add triggers and costs without duplicating control logic.",
        "success_metrics": "- Step scheduler deterministic across 10k sims\n- Hooks cover triggers/state-based actions\n- Replay timeline aligns with CR order",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: SBA epic\n- Link: Trigger epic",
        "dor": "- Phase-by-phase acceptance tests outlined",
        "dod": [
          "Step/phase scheduler done",
          "Hook API documented",
          "CI tests per step pass"
        ]
      }
    },
    {
      "title": "Epic: CR §400–408 — Zones & Moving Objects (Detailed) (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR"],
      "body": {
        "summary": "Deep-dive rules for moving objects between zones, entering/leaving battlefield, ownership/control changes, and object IDs continuity.",
        "hypothesis": "A canonical move-object API prevents desyncs and enables replay determinism.",
        "success_metrics": "- 0 orphan object IDs in fuzz tests\n- Copy/clone retain linkage rules validated\n- SBA checks after each movement",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Copy/Layer epics",
        "dor": "- Movement reason codes listed",
        "dod": [
          "Move API implemented",
          "ID continuity rules tested",
          "Replay assertions added"
        ]
      }
    },
    {
      "title": "Epic: CR §409–421 — Casting Spells & Activating/Triggered Abilities; The Stack (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Stack"],
      "body": {
        "summary": "Implement spell casting pipeline, costs, targets, legality checks, activated/triggered ability creation, and LIFO stack with priority.",
        "hypothesis": "A unified stack entry model simplifies validation, resolution, and logging.",
        "success_metrics": "- Illegal-cast rejection rate 100% on test suite\n- Stack resolution matches CR order in replays\n- Target legality rechecked on resolution",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Timing epic\n- Link: Layers/SBA epics",
        "dor": "- Casting pipeline steps defined",
        "dod": [
          "Stack entry schema stable",
          "Resolution callbacks implemented",
          "CI tests for costs/targets"
        ]
      }
    },
    {
      "title": "Epic: CR §613 — Layers & Dependency (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Layers"],
      "body": {
        "summary": "Implement the continuous effect layer system with timestamps, dependencies, and characteristic-defining abilities resolution order.",
        "hypothesis": "Correct layer evaluation is necessary for accurate board states and agent training signals.",
        "success_metrics": "- Canonical layer tests pass (power/toughness, type, color, abilities)\n- Timestamp/dependency ordering verified\n- Performance budget maintained under 5ms/apply",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Effects engine\n- Link: SBA epic",
        "dor": "- Effect categories enumerated",
        "dod": [
          "Layer evaluator shipped",
          "Microbenchmarks added",
          "Known tricky cases covered"
        ]
      }
    },
    {
      "title": "Epic: CR §614–616 — Replacement, Prevention, and Redirection Effects (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Effects"],
      "body": {
        "summary": "Add replacement/prevention/redirection framework with event pattern matching and choice handling.",
        "hypothesis": "A declarative event matcher reduces edge-case bugs and enables effect composition.",
        "success_metrics": "- ≥90% of reference scenarios covered\n- No double-application on mutually exclusive replacements\n- Choice prompts logged deterministically",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Event bus\n- Link: Trigger epic",
        "dor": "- Event taxonomy stable",
        "dod": [
          "Matcher engine implemented",
          "Choice API documented",
          "Conflict resolution tested"
        ]
      }
    },
    {
      "title": "Epic: CR §700–711 — Special Actions, Copies, Tokens, Face-Down/Modal/DFC, and Continuous Effects Details (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Advanced"],
      "body": {
        "summary": "Handle special actions (including morph/manifest), copy effects, token creation/ownership, face-down mechanics, modal/DFC handling, and linked abilities.",
        "hypothesis": "Supporting common modern mechanics is needed for realistic Commander simulations.",
        "success_metrics": "- Copy/token invariants hold in fuzz tests\n- DFC/mDFC orientation preserved in replays\n- Special actions integrated into timing model",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Layers epic\n- Link: Zones epic",
        "dor": "- Mechanic subset for POC listed",
        "dod": [
          "Special actions surfaced",
          "Copy rules validated",
          "DFC orientation rules tested"
        ]
      }
    },
    {
      "title": "Epic: CR §704 — State-Based Actions (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "SBA"],
      "body": {
        "summary": "Implement SBA checks and loop prevention, including commander-specific SBAs where applicable (e.g., lethal commander damage tracking).",
        "hypothesis": "SBA correctness prevents illegal board states and non-terminating loops.",
        "success_metrics": "- SBA scan after every visible event\n- No infinite SBA loops in 100k-step fuzz\n- Commander damage tracker accurate",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Combat epic\n- Link: Damage/life system",
        "dor": "- SBA catalog complete",
        "dod": [
          "SBA engine integrated",
          "Loop guards proven",
          "Commander damage tests pass"
        ]
      }
    },
    {
      "title": "Epic: CR §506–511 — Combat Phase and Steps (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Combat"],
      "body": {
        "summary": "Implement declare attackers/blockers, combat damage assignment, first strike/double strike phases, and combat-trigger windows.",
        "hypothesis": "Combat fidelity is essential for EDH gameplay realism and agent learning.",
        "success_metrics": "- Legal attack/block sets computed correctly\n- Damage assignment respects deathtouch/trample\n- First/double strike timing validated",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Keywords epic\n- Link: Layers/SBA epics",
        "dor": "- Combat rules cataloged",
        "dod": [
          "Combat FSM complete",
          "Assignment legality checks",
          "Triggers integrated"
        ]
      }
    },
    {
      "title": "Epic: CR Keywords & Ability System — Static, Triggered, Activated (CR 2025-09-19)",
      "labels": ["Type: Epic", "CR", "Keywords"],
      "body": {
        "summary": "Provide a pluggable keyword/ability registry (e.g., flying, trample, deathtouch, haste, vigilance, hexproof, ward) and generic ability lifecycle.",
        "hypothesis": "A registry-based design decouples card data from engine logic and expedites coverage growth.",
        "success_metrics": "- Top 30 EDH-relevant keywords implemented\n- Ability hooks for static/triggered/activated complete\n- Coverage harness shows ≥85% keyword usage supported",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Scryfall tags\n- Link: Layers/Stack epics",
        "dor": "- Keyword priority list defined",
        "dod": [
          "Registry v1 shipped",
          "Keyword tests in CI",
          "Docs: adding a new keyword"
        ]
      }
    },
    {
      "title": "Epic: Commander Rules Overlay — Color Identity, Commanders, Partner, Tax, Damage Tracking (CR 2025-09-19 + RC Guidelines)",
      "labels": ["Type: Epic", "CR", "Commander"],
      "body": {
        "summary": "Implement Commander-specific overlays: command zone, commander tax, color identity enforcement, partner/companion (if included), and 21 commander damage tracking.",
        "hypothesis": "EDH overlay is mandatory to simulate the target play format and align deck validation and gameplay.",
        "success_metrics": "- Color identity violations rejected\n- Commander tax applied correctly\n- Per-opponent commander damage accurate",
        "component": "rules",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Deck validator\n- Link: Damage/life subsystem",
        "dor": "- EDH overlay acceptance tests listed",
        "dod": [
          "EDH overlay integrated",
          "Damage per opponent persisted",
          "Deck checks wired to overlay"
        ]
      }
    },
    {
      "title": "Epic: Simulation Engine — Deterministic Core & Replayability",
      "labels": ["Type: Epic", "Platform", "Engine"],
      "body": {
        "summary": "Build the Python simulation kernel with deterministic RNG, event bus, step scheduler, and replay serializer.",
        "hypothesis": "Determinism enables RL reproducibility and fair benchmarking.",
        "success_metrics": "- Bitwise-identical replays for fixed seeds\n- Event bus latency < 1ms/publish\n- 10k-step soak without drift",
        "component": "engine",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: OpenTelemetry\n- Link: Replay schema",
        "dor": "- Determinism policy defined",
        "dod": [
          "RNG seeding strategy committed",
          "Replay format versioned",
          "Profiler baselines recorded"
        ]
      }
    },
    {
      "title": "Epic: CardIR Generator & Deck Service",
      "labels": ["Type: Epic", "Platform", "Data"],
      "body": {
        "summary": "Transform Scryfall/CCR data to CardIR, validate decklists (Commander), and expose deck/query APIs.",
        "hypothesis": "A stable CardIR unlocks consistent rules interpretation and fast lookups.",
        "success_metrics": "- 100% of sample cards parse to CardIR\n- Deck validator catches all invalid fixtures\n- Query latency p95 < 5ms (cached)",
        "component": "data",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Scryfall ETL",
        "dor": "- IR schema frozen v1",
        "dod": [
          "Parser + schema validators",
          "Deck API documented",
          "Caching via Redis enabled"
        ]
      }
    },
    {
      "title": "Epic: Matchmaker — 4-Player Pod Formation & Power Matching",
      "labels": ["Type: Epic", "Platform", "Matchmaking"],
      "body": {
        "summary": "Form Commander pods using deck power estimates/archetype tags and queue constraints.",
        "hypothesis": "Balanced pods accelerate training and produce fairer evaluations.",
        "success_metrics": "- Pod variance in power ≤ target band\n- Queue time vs. balance tradeoff logged\n- Backfill policies configurable",
        "component": "matchmaker",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Value Index Service",
        "dor": "- Power metric defined (POC)",
        "dod": [
          "Match policies implemented",
          "Kafka topic contracts",
          "Metrics & alerts in place"
        ]
      }
    },
    {
      "title": "Epic: Agent Service — RLlib Integration, State Encoder, Action Evaluator",
      "labels": ["Type: Epic", "Platform", "Agents"],
      "body": {
        "summary": "Integrate RLlib (PPO/A2C), implement state encoder, action space, opponent model hooks, and archetype bias controls.",
        "hypothesis": "A modular agent stack accelerates research iteration and prevents overfitting.",
        "success_metrics": "- Convergent baselines on scripted decks\n- Shadow policy divergence alarms working\n- Training reproducible across runs",
        "component": "agents",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Simulation Engine",
        "dor": "- Observation & action specs stable",
        "dod": [
          "RLlib glue complete",
          "Checkpointing/versioning",
          "Eval harness with seeds"
        ]
      }
    },
    {
      "title": "Epic: Reward Shaping & Bayesian Evaluator",
      "labels": ["Type: Epic", "Platform", "Evaluation"],
      "body": {
        "summary": "Reward definition (win, tag utility, shaping/decay) and Bayesian convergence/evaluation pipelines.",
        "hypothesis": "Principled rewards and Bayesian estimators yield stable rankings and learning signals.",
        "success_metrics": "- Rank stability across 1k sims\n- Reward ablations documented\n- Confidence intervals reported",
        "component": "evaluation",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Matchmaker\n- Link: Value Index",
        "dor": "- Reward vector agreed",
        "dod": [
          "Shaping funcs shipped",
          "Bayesian model reproducible",
          "Eval dashboards live"
        ]
      }
    },
    {
      "title": "Epic: Value Index Service — Deck Power & Archetype Tagging",
      "labels": ["Type: Epic", "Platform", "Ranking"],
      "body": {
        "summary": "Compute deck power indices using simulations, archetype tags, and historical outcomes; expose ranking APIs.",
        "hypothesis": "A centralized value index aligns matchmaking and research reporting.",
        "success_metrics": "- API p95 < 20ms\n- Drift detection for power changes\n- Cross-validation with held-out pods",
        "component": "ranking",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Replay & Evaluator",
        "dor": "- Power features selected",
        "dod": [
          "Index compute jobs",
          "API + docs published",
          "Changefeed via Kafka"
        ]
      }
    },
    {
      "title": "Epic: Replay Logger & Viewer",
      "labels": ["Type: Epic", "Platform", "Replays"],
      "body": {
        "summary": "Persist full event timelines, seeds, and decisions; build a minimal web viewer with searchable indexes.",
        "hypothesis": "Replays are essential for debugging, audits, and community validation.",
        "success_metrics": "- 100% runs generate replays\n- Index query < 50ms p95\n- Viewer renders 10k-step games smoothly",
        "component": "replays",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Engine events",
        "dor": "- Replay schema versioned",
        "dod": [
          "Writer/reader complete",
          "Viewer MVP shipped",
          "OTel spans correlated"
        ]
      }
    },
    {
      "title": "Epic: Explanation Service — Why-Logs & Decision Rationale",
      "labels": ["Type: Epic", "Platform", "Explainability"],
      "body": {
        "summary": "Generate human-readable rationales from state/action/value signals to explain agent choices.",
        "hypothesis": "Transparent decisions build trust and accelerate debugging.",
        "success_metrics": "- Rationale present for ≥80% actions\n- Latency overhead < 5%\n- Reviewer satisfaction (internal) ≥ 4/5",
        "component": "explain",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Agent Service",
        "dor": "- Rationale schema defined",
        "dod": [
          "Why-logs integrated",
          "Replay overlay support",
          "Docs with examples"
        ]
      }
    },
    {
      "title": "Epic: Scryfall ETL & Data Plumbing",
      "labels": ["Type: Epic", "Platform", "Data"],
      "body": {
        "summary": "Ingest Scryfall bulk data, normalize to SQL/NoSQL stores, maintain deltas, and publish to CardIR.",
        "hypothesis": "Robust ETL is required for high-coverage rules testing and deck validation.",
        "success_metrics": "- Nightly ETL success rate ≥ 99%\n- Schema drift alerts firing\n- Bulk -> CardIR latency < 10m",
        "component": "data",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Storage ADR",
        "dor": "- Source lists pinned",
        "dod": [
          "ETL jobs containerized",
          "Data contracts published",
          "Backfill and rollback SOPs"
        ]
      }
    },
    {
      "title": "Epic: Observability — OpenTelemetry, Prometheus, Grafana, Loki",
      "labels": ["Type: Epic", "Platform", "Observability"],
      "body": {
        "summary": "Instrument services with OTel traces/metrics/logs; dashboards and SLOs for simulation throughput, determinism, and agent training.",
        "hypothesis": "Good telemetry reduces MTTR and speeds iteration.",
        "success_metrics": "- Trace coverage ≥ 80%\n- Core SLOs defined and tracked\n- MTTR < target using runbooks",
        "component": "observability",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: SLO doc",
        "dor": "- Signals catalog complete",
        "dod": [
          "Dashboards live",
          "Alerting tuned",
          "Runbooks linked in alerts"
        ]
      }
    },
    {
      "title": "Epic: CI/CD & Environments — GitHub Actions, Helm, AKS",
      "labels": ["Type: Epic", "Platform", "DevOps"],
      "body": {
        "summary": "Build CI pipelines, Docker/Helm charts, ephemeral test envs, and AKS deploys; add golden-test and property-based test stages.",
        "hypothesis": "Automated builds/tests ensure safe iteration on complex rules.",
        "success_metrics": "- Pipeline duration < 15m\n- Flake rate < 1%\n- One-click POC deploy to AKS",
        "component": "devops",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Helm charts repo",
        "dor": "- Env matrices defined",
        "dod": [
          "CI stages green",
          "Charts versioned",
          "Release notes automated"
        ]
      }
    },
    {
      "title": "Epic: UI Client & Public Web — Dashboard and Replay Viewer",
      "labels": ["Type: Epic", "Platform", "UI"],
      "body": {
        "summary": "Provide a minimal dashboard (pods, queues, metrics) and a replay viewer for public demos of POC results.",
        "hypothesis": "A visible UI accelerates feedback from the community.",
        "success_metrics": "- Replay playback at 60 FPS\n- Core metrics visible to users\n- Accessibility checks pass (AA)",
        "component": "ui",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Replay Logger",
        "dor": "- UX wireframe drafted",
        "dod": [
          "Viewer MVP shipped",
          "Auth (if needed) configured",
          "Docs: user walkthrough"
        ]
      }
    },
    {
      "title": "Epic: Distributed Simulation Client — Volunteer Nodes",
      "labels": ["Type: Epic", "Platform", "Distributed"],
      "body": {
        "summary": "Package a sandboxed client to run vetted community simulations; secure enrollment and telemetry.",
        "hypothesis": "Community compute reduces POC training time and builds engagement.",
        "success_metrics": "- Successful jobs across ≥5 nodes\n- Result integrity checksums verified\n- Auto-update channel working",
        "component": "distributed",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Security ADR",
        "dor": "- Trust model drafted",
        "dod": [
          "Client container image published",
          "Job protocol documented",
          "Quarantine/ban flows implemented"
        ]
      }
    },
    {
      "title": "Epic: Security & Compliance — WotC Fan Content, Privacy, and Supply-Chain",
      "labels": ["Type: Epic", "Platform", "Security"],
      "body": {
        "summary": "Document and enforce compliance boundaries (Fan Content Policy), privacy posture for replays, dependency scanning, and SBOMs.",
        "hypothesis": "Clear compliance reduces takedown risk and fosters OSS adoption.",
        "success_metrics": "- SBOM generated per build\n- Dependency CVEs triaged < 7 days\n- Policy docs published and referenced",
        "component": "security",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Legal notes",
        "dor": "- Policy review scheduled",
        "dod": [
          "SBOM in artifacts",
          "SAST/DAST in CI",
          "Fan Content compliance doc"
        ]
      }
    },
    {
      "title": "Epic: Data Stores — Redis, PostgreSQL, MongoDB, Neo4j",
      "labels": ["Type: Epic", "Platform", "Storage"],
      "body": {
        "summary": "Provision and model data stores for low-latency lookups, relational metadata, document payloads, and graph relations.",
        "hypothesis": "Right-shaped storage simplifies engine & analytics layers.",
        "success_metrics": "- p95 read latency targets met\n- Backup/restore verified\n- Schema docs generated",
        "component": "storage",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Storage ADRs",
        "dor": "- Capacity plan drafted",
        "dod": [
          "Helm charts deployed",
          "Migrations automated",
          "Backups tested"
        ]
      }
    },
    {
      "title": "Epic: Kafka Event Mesh — Topics, Contracts, and Backpressure",
      "labels": ["Type: Epic", "Platform", "Messaging"],
      "body": {
        "summary": "Define Kafka topics and Avro/Protobuf contracts for simulation events, agent I/O, matchmaker, and index updates.",
        "hypothesis": "A typed event mesh decouples services and improves reliability.",
        "success_metrics": "- Contract tests pass in CI\n- Consumer lag alerts tuned\n- Exactly-once semantics strategy documented",
        "component": "messaging",
        "wsjf_bv": "1",
        "wsjf_tc": "1",
        "wsjf_rr": "1",
        "wsjf_js": "1",
        "deps": "- Link: Topic catalog",
        "dor": "- Contracts drafted",
        "dod": [
          "Schemas versioned",
          "Load tests executed",
          "Backpressure patterns implemented"
        ]
      }
    }
  ]
}
{
  "features": [
    {
      "title": "Feature: Commander Game Setup (APNAP, Starting Life, Partners)",
      "labels": ["Type: Feature", "Epic: CR §100–104"],
      "body": {
        "description": "Implement Commander-specific setup: 4-player pod roles, 40 life totals, commander selection/partner validation, command zone initialization, APNAP ordering and first player determination.",
        "acceptance": [
          "Given a fixed RNG seed, all initial states are bitwise-identical.",
          "Invalid commander pairs (color identity / partner) are rejected with clear errors.",
          "APNAP ordering and first-player selection match CR examples for multiplayer.",
          "Replay of setup emits deterministically ordered events."
        ],
        "fr_ids": ["FR-SETUP-001", "FR-SETUP-002"],
        "nfr_category": "determinism",
        "nfr_target": "Identical initial state across 100 test runs per seed.",
        "component": "rules",
        "cr_refs": "§100–104, §903",
        "deps": ["Link: ADR—State Model v1", "Link: CardIR v1"],
        "dod": [
          "Golden test: setup sequence",
          "Commander & partner validators",
          "Docs: setup FSM diagram"
        ]
      }
    },
    {
      "title": "Feature: Mulligan (Vancouver/London for Commander)",
      "labels": ["Type: Feature", "Epic: CR §100–104"],
      "body": {
        "description": "Implement Commander mulligan policy with hand size adjustments and bottom-of-library decisions per CR and EDH practices.",
        "acceptance": [
          "Players can mulligan in APNAP order until all keep.",
          "Hand sizes and bottomed cards are tracked in replays.",
          "Illegality (e.g., drawing extra cards) is prevented by the engine."
        ],
        "fr_ids": ["FR-SETUP-003"],
        "nfr_category": "usability",
        "nfr_target": "Mulligan UI/CLI prompts < 2s flow completion for 4 players.",
        "component": "rules",
        "cr_refs": "§103, §106, EDH Mulligan",
        "deps": ["Link: Replay Logger"],
        "dod": [
          "Unit tests for 0–N mulligans",
          "Replay snapshot of each mulligan round"
        ]
      }
    },
    {
      "title": "Feature: Color & Mana Representation",
      "labels": ["Type: Feature", "Epic: CR §105–110"],
      "body": {
        "description": "Canonical color, color identity, and mana symbol graph with hybrid, phyrexian, snow, and colorless distinctions.",
        "acceptance": [
          "All Scryfall symbols map to canonical tokens.",
          "Color identity checks pass on 100 sample EDH decks.",
          "Mana pool supports floating, burn prevention, and step cleanup."
        ],
        "fr_ids": ["FR-MANA-001", "FR-MANA-002"],
        "nfr_category": "performance",
        "nfr_target": "Apply/consume mana ops in < 1ms p95.",
        "component": "rules",
        "cr_refs": "§105–107, §202",
        "deps": ["Link: CardIR parser"],
        "dod": [
          "Symbol table committed",
          "Unit tests for hybrid/phyrexian",
          "Docs: color identity rules"
        ]
      }
    },
    {
      "title": "Feature: Object Identity & Zones Core",
      "labels": ["Type: Feature", "Epic: CR §111–116"],
      "body": {
        "description": "Object IDs, ownership vs. control, and core zone model (library/hand/battlefield/graveyard/exile/stack/command).",
        "acceptance": [
          "Object IDs remain stable across zone moves (per CR).",
          "Visibility masks enforced for hidden zones.",
          "Command zone semantics present for commanders."
        ],
        "fr_ids": ["FR-ZONE-001"],
        "nfr_category": "reliability",
        "nfr_target": "Zero orphan IDs in 100k event fuzz test.",
        "component": "rules",
        "cr_refs": "§108–111, §400",
        "deps": ["Link: Move API"],
        "dod": [
          "Zone graph documented",
          "Visibility unit tests",
          "Replay includes zone transitions"
        ]
      }
    },
    {
      "title": "Feature: Priority System & Pass Cycles",
      "labels": ["Type: Feature", "Epic: CR §117"],
      "body": {
        "description": "Implement priority passing in multiplayer with APNAP and windowing for instants/abilities.",
        "acceptance": [
          "Pass cycles terminate only when stack is empty and all pass in sequence.",
          "No illegal timing actions admitted by the engine.",
          "APNAP ordering validated in tests."
        ],
        "fr_ids": ["FR-TIMING-001"],
        "nfr_category": "determinism",
        "nfr_target": "Identical priority traces across 100 seeds.",
        "component": "rules",
        "cr_refs": "§117",
        "deps": ["Link: Stack feature"],
        "dod": [
          "Priority FSM implemented",
          "Golden tests: two-player & four-player"
        ]
      }
    },
    {
      "title": "Feature: Turn/Step Scheduler",
      "labels": ["Type: Feature", "Epic: CR §200–211"],
      "body": {
        "description": "Deterministic scheduler for phases and steps: untap, upkeep, draw, main, combat, second main, end, cleanup.",
        "acceptance": [
          "Step order and triggers align with CR.",
          "Cleanup handles SBA and hand-size discards.",
          "Hooks for abilities fire at correct windows."
        ],
        "fr_ids": ["FR-TURN-001"],
        "nfr_category": "performance",
        "nfr_target": "Step transition overhead < 0.5ms p95.",
        "component": "rules",
        "cr_refs": "§500–511, §514–515",
        "deps": ["Link: SBA checks", "Link: Trigger engine"],
        "dod": [
          "Scheduler unit tests by step",
          "Replay step markers"
        ]
      }
    },
    {
      "title": "Feature: Move Object API (Enter/Leave Battlefield)",
      "labels": ["Type: Feature", "Epic: CR §400–408"],
      "body": {
        "description": "Unified API to move objects between zones, handling replacement effects, ETB/LTB ordering, and last-known information.",
        "acceptance": [
          "All movement reasons captured (cast, resolve, die, exile, bounce, blink).",
          "Last-known information available for appropriate checks.",
          "SBA scan runs after each movement."
        ],
        "fr_ids": ["FR-MOVE-001"],
        "nfr_category": "reliability",
        "nfr_target": "Zero illegal post-move states in fuzz tests.",
        "component": "rules",
        "cr_refs": "§400–408, §608",
        "deps": ["Link: Layers", "Link: Replacement effects"],
        "dod": [
          "API doc with examples",
          "ETB/LTB test fixtures"
        ]
      }
    },
    {
      "title": "Feature: Casting Pipeline & Costs",
      "labels": ["Type: Feature", "Epic: CR §409–421"],
      "body": {
        "description": "Spell/ability casting pipeline: announce, choose modes/targets, determine and pay costs (including alternative/additional), place on stack.",
        "acceptance": [
          "Illegal casts rejected with explicit reason.",
          "Cost reducers/increasers reflected in payment records.",
          "Targets revalidated on resolution."
        ],
        "fr_ids": ["FR-STACK-001", "FR-STACK-002"],
        "nfr_category": "observability",
        "nfr_target": "Per-cast event log fields ≥ 95% population.",
        "component": "rules",
        "cr_refs": "§601–608, §601.2, §117",
        "deps": ["Link: Priority system", "Link: Layers"],
        "dod": [
          "Pipeline step unit tests",
          "Replay: cast timeline with costs"
        ]
      }
    },
    {
      "title": "Feature: Stack Resolution & Targets",
      "labels": ["Type: Feature", "Epic: CR §409–421"],
      "body": {
        "description": "LIFO stack resolution with target legality checks, fizzle handling, and replacement effects interaction.",
        "acceptance": [
          "Spells/abilities without legal targets on resolution are countered by rules.",
          "Replacement effects do not double-apply.",
          "Triggered abilities created/queued per CR."
        ],
        "fr_ids": ["FR-STACK-003"],
        "nfr_category": "determinism",
        "nfr_target": "Identical stack traces across 100 seeds.",
        "component": "rules",
        "cr_refs": "§608–610, §614–616",
        "deps": ["Link: Replacement/Prevention"],
        "dod": [
          "Resolution unit tests",
          "Fizzle scenarios covered"
        ]
      }
    },
    {
      "title": "Feature: Layers Engine (Continuous Effects)",
      "labels": ["Type: Feature", "Epic: CR §613"],
      "body": {
        "description": "Implement layer order, timestamps, dependency system, CDA application, and copyable values surface.",
        "acceptance": [
          "Reference layer tests (type/color/abilities/PT) pass.",
          "Dependency ordering produces expected outcomes.",
          "Apply pass executes within performance budget."
        ],
        "fr_ids": ["FR-LAYERS-001"],
        "nfr_category": "performance",
        "nfr_target": "Apply layers in < 5ms p95 for 200 permanents.",
        "component": "rules",
        "cr_refs": "§613",
        "deps": ["Link: Keywords registry"],
        "dod": [
          "Layer evaluator documented",
          "Tricky cases catalogued"
        ]
      }
    },
    {
      "title": "Feature: Replacement/Prevention/Redirection Framework",
      "labels": ["Type: Feature", "Epic: CR §614–616"],
      "body": {
        "description": "Declarative event matchers, priority of choices, mutual exclusivity handling, and audit logging.",
        "acceptance": [
          "Overlapping replacements prompt for choice once.",
          "Mutually exclusive effects never double-apply.",
          "Redirection preserves controller/owner rules."
        ],
        "fr_ids": ["FR-EFFECTS-001"],
        "nfr_category": "observability",
        "nfr_target": "100% of applied replacements recorded with source IDs.",
        "component": "rules",
        "cr_refs": "§614–616",
        "deps": ["Link: Event bus"],
        "dod": [
          "Matcher DSL doc",
          "Unit tests for conflict cases"
        ]
      }
    },
    {
      "title": "Feature: Special Actions & Face-Down/Modal/DFC Handling",
      "labels": ["Type: Feature", "Epic: CR §700–711"],
      "body": {
        "description": "Implement special actions (morph/manifest), face-down characteristics, modal choices, and DFC/mDFC orientation rules.",
        "acceptance": [
          "Special actions appear in legal action set without using the stack.",
          "DFC orientation/face-up state persists across zones where applicable.",
          "Modal choices serialized in replays."
        ],
        "fr_ids": ["FR-ADV-001"],
        "nfr_category": "reliability",
        "nfr_target": "Zero illegal face-down states in fuzz runs.",
        "component": "rules",
        "cr_refs": "§702, §708, §711",
        "deps": ["Link: Layers", "Link: Move API"],
        "dod": [
          "Test deck fixtures for morph/DFC",
          "Replay inspection utilities"
        ]
      }
    },
    {
      "title": "Feature: State-Based Actions Scanner",
      "labels": ["Type: Feature", "Epic: CR §704"],
      "body": {
        "description": "Centralized SBA evaluation with loop guards, death/destruction state checks, and commander damage/lethal tracking.",
        "acceptance": [
          "SBA scan triggered after all relevant events.",
          "No infinite SBA loops across 100k-step fuzz test.",
          "Commander damage tracked per defending player."
        ],
        "fr_ids": ["FR-SBA-001"],
        "nfr_category": "reliability",
        "nfr_target": "0 deadlocks; SBA pass executes < 2ms p95.",
        "component": "rules",
        "cr_refs": "§704, §903.10",
        "deps": ["Link: Damage system", "Link: Combat feature"],
        "dod": [
          "SBA catalog implemented",
          "Loop guard tests"
        ]
      }
    },
    {
      "title": "Feature: Combat Phase — Declare Attackers/Blockers",
      "labels": ["Type: Feature", "Epic: CR §506–511"],
      "body": {
        "description": "Legal set computation for attackers and blockers with vigilance, menace, flying/reach, protection, and hexproof/ward interactions.",
        "acceptance": [
          "Illegal assignments rejected with reason.",
          "Menace and multiple blockers legality enforced.",
          "Ward/hexproof target legality checked before declaration."
        ],
        "fr_ids": ["FR-COMBAT-001"],
        "nfr_category": "performance",
        "nfr_target": "Generate legal sets in < 10ms for 200 creatures.",
        "component": "rules",
        "cr_refs": "§508–509, §702",
        "deps": ["Link: Keywords registry"],
        "dod": [
          "Assignment unit tests",
          "Menace/flying reach cases"
        ]
      }
    },
    {
      "title": "Feature: Combat Damage Assignment (First Strike/Double Strike/Trample/Deathtouch)",
      "labels": ["Type: Feature", "Epic: CR §506–511"],
      "body": {
        "description": "Two-pass damage system supporting first/double strike windows, deathtouch lethal assignment rules, and trample overflow.",
        "acceptance": [
          "First/double strike windows create separate damage steps.",
          "Deathtouch reduces lethal threshold to 1 damage per blocker.",
          "Trample overflow respects remaining lethal requirements."
        ],
        "fr_ids": ["FR-COMBAT-002"],
        "nfr_category": "determinism",
        "nfr_target": "Identical damage timelines across 100 seeds.",
        "component": "rules",
        "cr_refs": "§510–511, §702.2, §702.19",
        "deps": ["Link: SBA scanner"],
        "dod": [
          "Damage timeline tests",
          "Replay markers for each step"
        ]
      }
    },
    {
      "title": "Feature: Keywords/Abilities Registry (Top 30 EDH Keywords)",
      "labels": ["Type: Feature", "Epic: Keywords & Ability System"],
      "body": {
        "description": "Pluggable registry for static/triggered/activated abilities; implement initial set (~30) including flying, trample, deathtouch, haste, vigilance, hexproof, ward, lifelink, menace, reach, indestructible, prowess, cascade (read-only), landfall, etc.",
        "acceptance": [
          "Registry loads keyword handlers at startup.",
          "Coverage harness shows ≥85% usage supported across sample EDH decks.",
          "Each keyword has unit tests and docs template."
        ],
        "fr_ids": ["FR-KW-001"],
        "nfr_category": "maintainability",
        "nfr_target": "Add new keyword via single module with < 50 LOC change.",
        "component": "rules",
        "cr_refs": "Keyword glossary; §613 for static interactions",
        "deps": ["Link: Layers", "Link: Stack"],
        "dod": [
          "Registry API doc",
          "Top 30 implemented & tested"
        ]
      }
    },
    {
      "title": "Feature: Commander Overlay — Tax & Color Identity Enforcement",
      "labels": ["Type: Feature", "Epic: Commander Rules Overlay"],
      "body": {
        "description": "Apply commander tax on each cast from command zone; enforce color identity on deck construction and gameplay (including hybrid/phyrexian considerations).",
        "acceptance": [
          "Tax increases by 2 generic per prior cast from command zone.",
          "Color identity violations blocked at deck import.",
          "Partner rules enforced if present."
        ],
        "fr_ids": ["FR-EDH-001", "FR-EDH-002"],
        "nfr_category": "reliability",
        "nfr_target": "Zero false negatives/positives on 200 EDH decks.",
        "component": "rules",
        "cr_refs": "§903",
        "deps": ["Link: Deck Service", "Link: Casting pipeline"],
        "dod": [
          "Tax tests (multi-cast sequences)",
          "Deck validator integration"
        ]
      }
    },
    {
      "title": "Feature: Commander Damage Tracking (Per-Defender)",
      "labels": ["Type: Feature", "Epic: Commander Rules Overlay"],
      "body": {
        "description": "Track 21 commander combat damage per defending player and apply SBA loss condition.",
        "acceptance": [
          "Per-defender tallies increment only for combat damage by that commander.",
          "Loss condition triggered via SBA at ≥21 damage.",
          "Replays show per-opponent counters."
        ],
        "fr_ids": ["FR-EDH-003"],
        "nfr_category": "observability",
        "nfr_target": "Counters exposed to UI/replay consistently.",
        "component": "rules",
        "cr_refs": "§903.10",
        "deps": ["Link: Combat damage feature"],
        "dod": [
          "Unit tests with multiple commanders",
          "Replay overlay support"
        ]
      }
    },
    {
      "title": "Feature: Deterministic RNG & Replay Serializer",
      "labels": ["Type: Feature", "Epic: Simulation Engine"],
      "body": {
        "description": "Seeded RNG, event bus, and replay writer/reader with schema versioning.",
        "acceptance": [
          "Bitwise-identical replays from fixed seeds.",
          "Schema version stored in every replay file.",
          "Reader validates checksum and schema compatibility."
        ],
        "fr_ids": ["FR-ENGINE-001"],
        "nfr_category": "determinism",
        "nfr_target": "Replays identical over 100 runs.",
        "component": "engine",
        "cr_refs": "N/A",
        "deps": ["Link: Observability"],
        "dod": [
          "Serializer benchmarks",
          "Schema migration notes"
        ]
      }
    },
    {
      "title": "Feature: CardIR Parser & Normalizer",
      "labels": ["Type: Feature", "Epic: CardIR Generator & Deck Service"],
      "body": {
        "description": "Parse Scryfall/CCR into CardIR with symbol normalization, text templating, and ability hooks.",
        "acceptance": [
          "100% of sample cards parse without fatal errors.",
          "CardIR exposes copyable values and keyword tags.",
          "Error reporting points to source record."
        ],
        "fr_ids": ["FR-CARDIR-001"],
        "nfr_category": "performance",
        "nfr_target": "Parse 10k cards in < 60s on CI runner.",
        "component": "data",
        "cr_refs": "§613 (copyable), keyword glossary",
        "deps": ["Link: Scryfall ETL"],
        "dod": [
          "Schema validators",
          "Failed record quarantine"
        ]
      }
    },
    {
      "title": "Feature: Deck Validator (Commander)",
      "labels": ["Type: Feature", "Epic: CardIR Generator & Deck Service"],
      "body": {
        "description": "Validate EDH decklists: 100-card singleton, color identity, banned list (if used), companion/partner rules (if included).",
        "acceptance": [
          "Violations return structured errors with rule references.",
          "Singleton violations detected including basic exceptions.",
          "Color identity and partner checks reliable on test corpus."
        ],
        "fr_ids": ["FR-DECK-001"],
        "nfr_category": "usability",
        "nfr_target": "Validation response in < 200ms p95.",
        "component": "data",
        "cr_refs": "§100.2, §903",
        "deps": ["Link: CardIR parser"],
        "dod": [
          "Validator CLI/HTTP endpoint",
          "Test deck fixtures included"
        ]
      }
    },
    {
      "title": "Feature: RLlib Integration & State Encoder",
      "labels": ["Type: Feature", "Epic: Agent Service"],
      "body": {
        "description": "Wire simulation to RLlib (PPO/A2C), implement observation encoder (visibility-masked) and action space.",
        "acceptance": [
          "Baseline agent trains and converges on scripted decks.",
          "Shadow policy divergence alarms configured.",
          "Observation schema versioned and documented."
        ],
        "fr_ids": ["FR-AGENT-001"],
        "nfr_category": "reliability",
        "nfr_target": "Training run-to-run variance within target CI.",
        "component": "agents",
        "cr_refs": "§117 (timing for actions)",
        "deps": ["Link: Simulation Engine"],
        "dod": [
          "Encoder unit tests",
          "Action legality guardrails"
        ]
      }
    },
    {
      "title": "Feature: Matchmaker — Power-Balanced Pod Formation",
      "labels": ["Type: Feature", "Epic: Matchmaker"],
      "body": {
        "description": "Queue + policy engine to create 4-player pods using deck power estimates and archetype tags.",
        "acceptance": [
          "Average intra-pod power variance within configured band.",
          "Backfill rules documented and tested.",
          "Kafka topic contracts validated in CI."
        ],
        "fr_ids": ["FR-MATCH-001"],
        "nfr_category": "performance",
        "nfr_target": "Pod formation in < 2s p95 under nominal load.",
        "component": "matchmaker",
        "cr_refs": "N/A",
        "deps": ["Link: Value Index Service"],
        "dod": [
          "Policy tests",
          "Lag/throughput dashboards"
        ]
      }
    },
    {
      "title": "Feature: Reward Shaping Vector & Decay",
      "labels": ["Type: Feature", "Epic: Reward Shaping & Bayesian Evaluator"],
      "body": {
        "description": "Define reward vector (win, tempo, resource efficiency, tag utilities) and implement decay/normalization.",
        "acceptance": [
          "Ablation study shows expected learning impact.",
          "Configurable weights via YAML with defaults.",
          "Metrics exported for each reward component."
        ],
        "fr_ids": ["FR-REWARD-001"],
        "nfr_category": "observability",
        "nfr_target": "Per-step reward logging with < 5% overhead.",
        "component": "evaluation",
        "cr_refs": "N/A",
        "deps": ["Link: Agent Service"],
        "dod": [
          "Ablation notebook",
          "Config schema tests"
        ]
      }
    },
    {
      "title": "Feature: Bayesian Evaluator & Ranking",
      "labels": ["Type: Feature", "Epic: Reward Shaping & Bayesian Evaluator"],
      "body": {
        "description": "Compute deck/agent rankings with Bayesian estimators; expose CI bands and stability metrics.",
        "acceptance": [
          "Confidence intervals published with ranks.",
          "Stability across seeds within configured tolerance.",
          "API returns deltas vs. last baseline."
        ],
        "fr_ids": ["FR-EVAL-001"],
        "nfr_category": "performance",
        "nfr_target": "Evaluate 10k games within nightly window.",
        "component": "evaluation",
        "cr_refs": "N/A",
        "deps": ["Link: Replay Index", "Link: Value Index"],
        "dod": [
          "Stat tests for convergence",
          "Public docs for interpretation"
        ]
      }
    },
    {
      "title": "Feature: Value Index API",
      "labels": ["Type: Feature", "Epic: Value Index Service"],
      "body": {
        "description": "Serve power estimates and archetype tags via HTTP/GRPC with changefeeds.",
        "acceptance": [
          "p95 latency < 20ms under 100 RPS.",
          "Changefeed publishes updates per run.",
          "Schema versioned and contract-tested."
        ],
        "fr_ids": ["FR-VI-001"],
        "nfr_category": "performance",
        "nfr_target": "SLO: 99.9% ≤ 50ms.",
        "component": "ranking",
        "cr_refs": "N/A",
        "deps": ["Link: Kafka", "Link: Storage"],
        "dod": [
          "Load tests",
          "Client SDK stubs"
        ]
      }
    },
    {
      "title": "Feature: Replay Logger & Search Index",
      "labels": ["Type: Feature", "Epic: Replay Logger & Viewer"],
      "body": {
        "description": "Persist event timelines with searchable index (by card, trigger, step, outcome).",
        "acceptance": [
          "100% of games emit replay files and index entries.",
          "Query by (card, step, outcome) returns results < 50ms p95.",
          "Replays include schema/version headers."
        ],
        "fr_ids": ["FR-REPLAY-001"],
        "nfr_category": "observability",
        "nfr_target": "Index compaction keeps storage growth < 5% per 10k games.",
        "component": "replays",
        "cr_refs": "N/A",
        "deps": ["Link: Simulation Engine"],
        "dod": [
          "Index schema doc",
          "CI search tests"
        ]
      }
    },
    {
      "title": "Feature: Minimal Web Replay Viewer",
      "labels": ["Type: Feature", "Epic: UI Client & Public Web"],
      "body": {
        "description": "Web UI to load and step through replays with board state snapshots and action annotations.",
        "acceptance": [
          "Playback at 60 FPS on sample 10k-step game.",
          "Keyboard step/seek controls present.",
          "Accessibility AA checks pass on core views."
        ],
        "fr_ids": ["FR-UI-001"],
        "nfr_category": "usability",
        "nfr_target": "TTI < 3s on baseline hardware.",
        "component": "ui",
        "cr_refs": "N/A",
        "deps": ["Link: Replay API"],
        "dod": [
          "E2E smoke tests",
          "User guide page"
        ]
      }
    },
    {
      "title": "Feature: Scryfall ETL — Bulk Ingest & Deltas",
      "labels": ["Type: Feature", "Epic: Scryfall ETL & Data Plumbing"],
      "body": {
        "description": "Nightly bulk ingest, normalization to storage, and delta detection with rollback.",
        "acceptance": [
          "Nightly success rate ≥ 99%.",
          "Rollback to previous snapshot succeeds.",
          "Schema drift alerting configured."
        ],
        "fr_ids": ["FR-ETL-001"],
        "nfr_category": "reliability",
        "nfr_target": "RPO ≤ 24h; RTO ≤ 30m.",
        "component": "data",
        "cr_refs": "N/A",
        "deps": ["Link: Storage Helm charts"],
        "dod": [
          "Runbook documented",
          "Health checks in CI"
        ]
      }
    },
    {
      "title": "Feature: Observability Baseline (OTel/Prom/Loki/Grafana)",
      "labels": ["Type: Feature", "Epic: Observability"],
      "body": {
        "description": "Instrument services with traces, metrics, logs, dashboards, and SLOs for throughput, determinism, and error budgets.",
        "acceptance": [
          "Trace coverage ≥ 80% across core services.",
          "Dashboards for SLOs are published.",
          "Alert playbooks linked from alerts."
        ],
        "fr_ids": ["FR-OBS-001"],
        "nfr_category": "operability",
        "nfr_target": "MTTR < target via runbooks.",
        "component": "observability",
        "cr_refs": "N/A",
        "deps": ["Link: OTel collector"],
        "dod": [
          "Dashboards as code",
          "Synthetic checks added"
        ]
      }
    },
    {
      "title": "Feature: CI/CD Pipeline (Docker, Helm, AKS)",
      "labels": ["Type: Feature", "Epic: CI/CD & Environments"],
      "body": {
        "description": "Build/test pipelines, golden/property-based tests, container publish, Helm deploy to AKS.",
        "acceptance": [
          "Pipeline duration < 15 minutes.",
          "Flake rate < 1% over 100 runs.",
          "One-click POC deploy succeeds."
        ],
        "fr_ids": ["FR-CICD-001"],
        "nfr_category": "performance",
        "nfr_target": "CI concurrency scales to 4 parallel jobs without contention.",
        "component": "devops",
        "cr_refs": "N/A",
        "deps": ["Link: Helm charts", "Link: Test harness"],
        "dod": [
          "Required checks enforced",
          "Release notes automation"
        ]
      }
    },
    {
      "title": "Feature: Kafka Topic Contracts",
      "labels": ["Type: Feature", "Epic: Kafka Event Mesh"],
      "body": {
        "description": "Define Avro/Protobuf schemas and topic ACLs for simulation events, agent I/O, matchmaking, and value index updates.",
        "acceptance": [
          "Contract tests pass in CI for producers/consumers.",
          "Consumer lag alerting configured.",
          "Backpressure patterns documented."
        ],
        "fr_ids": ["FR-KAFKA-001"],
        "nfr_category": "reliability",
        "nfr_target": "Zero schema-regression incidents in CI.",
        "component": "messaging",
        "cr_refs": "N/A",
        "deps": ["Link: Observability", "Link: Storage"],
        "dod": [
          "Schema registry configured",
          "Load tests performed"
        ]
      }
    },
    {
      "title": "Feature: Data Stores Provisioning (Redis/Postgres/Mongo/Neo4j)",
      "labels": ["Type: Feature", "Epic: Data Stores"],
      "body": {
        "description": "Provision storage backends with charts, backups, migrations, and schemas for engine, replays, and analytics.",
        "acceptance": [
          "p95 read latency SLOs met per store.",
          "Backup/restore tested successfully.",
          "Schemas generated and versioned."
        ],
        "fr_ids": ["FR-STORAGE-001"],
        "nfr_category": "reliability",
        "nfr_target": "RPO ≤ 24h; RTO ≤ 1h.",
        "component": "storage",
        "cr_refs": "N/A",
        "deps": ["Link: CI/CD pipeline"],
        "dod": [
          "Helm values committed",
          "Migration scripts in repo"
        ]
      }
    },
    {
      "title": "Feature: Security Baseline & Fan Content Compliance",
      "labels": ["Type: Feature", "Epic: Security & Compliance"],
      "body": {
        "description": "SBOM, dependency scanning, SAST/DAST in CI, and documented boundaries for WotC Fan Content Policy and replay privacy.",
        "acceptance": [
          "SBOM artifact attached to each release.",
          "Critical CVEs triaged within 7 days.",
          "Compliance doc published in repo."
        ],
        "fr_ids": ["FR-SEC-001"],
        "nfr_category": "security",
        "nfr_target": "Zero high severity findings untriaged > 7 days.",
        "component": "security",
        "cr_refs": "N/A",
        "deps": ["Link: CI/CD pipeline"],
        "dod": [
          "Policies in /docs",
          "Alerts wired to owners"
        ]
      }
    }
  ]
}
{
  "features": [
    {
      "title": "Feature: Trigger Engine & Event Bus",
      "labels": ["Type: Feature", "Epic: CR §200–211 / §603 Triggers"],
      "body": {
        "description": "Centralized trigger detection, queuing, and resolution windows tied to the step/phase scheduler; supports intervening-if clauses and APNAP ordering.",
        "acceptance": [
          "Beginning/ending step triggers fire exactly once at the correct windows.",
          "Intervening-if triggers only go on the stack when conditions are met at both trigger and resolution times.",
          "APNAP ordering observed when multiple players’ triggers occur simultaneously."
        ],
        "fr_ids": ["FR-TRIG-001"],
        "nfr_category": "determinism",
        "nfr_target": "Identical trigger queues across 100 seeded runs.",
        "component": "rules",
        "cr_refs": "§603, §117, §500–511",
        "deps": ["Link: Turn/Step Scheduler", "Link: Stack Resolution & Targets"],
        "dod": [
          "Trigger taxonomy documented",
          "Replay fields: trigger_source, when, controller",
          "Unit tests for intervening-if and APNAP"
        ]
      }
    },
    {
      "title": "Feature: Mana Abilities & Cost Payment Engine",
      "labels": ["Type: Feature", "Epic: CR §106–107 / §605 Mana Abilities"],
      "body": {
        "description": "Implement activated and triggered mana abilities (non-stack for eligible abilities), floating mana lifecycle, and unified cost payment with alternates/additionals.",
        "acceptance": [
          "Eligible activated mana abilities resolve without using the stack per CR.",
          "Triggered mana abilities use the stack per CR exceptions.",
          "Cost payment records show exact sources (lands, treasures, rituals) and reductions/increases applied."
        ],
        "fr_ids": ["FR-MANA-003", "FR-COST-001"],
        "nfr_category": "performance",
        "nfr_target": "Compute payability in < 1ms p95 with 50 potential sources.",
        "component": "rules",
        "cr_refs": "§106–107, §601.2f, §605",
        "deps": ["Link: Color & Mana Representation", "Link: Casting Pipeline & Costs"],
        "dod": [
          "Eligibility matrix for mana abilities",
          "Payment audit log fields added",
          "Hybrid/phyrexian payment tests"
        ]
      }
    },
    {
      "title": "Feature: Targeting Rules & Protection/Hexproof/Ward",
      "labels": ["Type: Feature", "Epic: CR §114 / Keywords"],
      "body": {
        "description": "Legality checks for choosing and maintaining targets, including protection, shroud/hexproof, ward payments, and change of control effects.",
        "acceptance": [
          "Illegal targets are rejected with clear reason at announcement.",
          "Ward prompts appear and are enforced at spell/ability resolution; failure to pay counters by rules.",
          "Target legality rechecked on resolution; fizzles correctly applied."
        ],
        "fr_ids": ["FR-TARGET-001"],
        "nfr_category": "usability",
        "nfr_target": "Target selection latency < 100ms p95.",
        "component": "rules",
        "cr_refs": "§114, §608, §702 (hexproof, ward, protection)",
        "deps": ["Link: Casting Pipeline & Costs", "Link: Stack Resolution & Targets"],
        "dod": [
          "Targeting matrix documented",
          "Unit tests: ward/protection/hexproof",
          "Replay: target snapshots"
        ]
      }
    },
    {
      "title": "Feature: Tokens & Creation/Ownership Semantics",
      "labels": ["Type: Feature", "Epic: CR §111, §701.6 Tokens"],
      "body": {
        "description": "Create tokens with correct characteristics, owners/controllers, zone movement behavior, and death/exile handling.",
        "acceptance": [
          "Token ownership persists across control changes and zone moves per CR.",
          "Dies triggers fire for tokens appropriately before ceasing to exist in non-battlefield zones.",
          "Token copy interactions respect copyable values only."
        ],
        "fr_ids": ["FR-TOKEN-001"],
        "nfr_category": "reliability",
        "nfr_target": "Zero orphaned token IDs in 100k event fuzz.",
        "component": "rules",
        "cr_refs": "§111, §701.6, §613 (copyable values)",
        "deps": ["Link: Move Object API", "Link: Layers Engine"],
        "dod": [
          "Token factory helpers",
          "Fixtures for common token producers",
          "Replay: token lifecycle markers"
        ]
      }
    },
    {
      "title": "Feature: Copy Effects (Objects & Spells)",
      "labels": ["Type: Feature", "Epic: CR §707 Copying Objects"],
      "body": {
        "description": "Support copy effects for permanents and spells with correct copyable values, timestamping, and layer interactions including exceptions.",
        "acceptance": [
          "Copy effects produce expected characteristics excluding non-copyable modifications.",
          "Timestamp and dependency ordering verified in layer application.",
          "Copies of spells inherit chosen modes/targets correctly."
        ],
        "fr_ids": ["FR-COPY-001"],
        "nfr_category": "determinism",
        "nfr_target": "Identical results on 50 canonical copy testcases.",
        "component": "rules",
        "cr_refs": "§707, §613",
        "deps": ["Link: Layers Engine", "Link: Casting Pipeline & Costs"],
        "dod": [
          "Copyable values spec doc",
          "Unit tests incl. copy-of-copy"
        ]
      }
    },
    {
      "title": "Feature: Linked Abilities & Exile References",
      "labels": ["Type: Feature", "Epic: CR §607 Linked Abilities"],
      "body": {
        "description": "Implement linked abilities (e.g., imprint/adventure/exile references) to ensure abilities refer to the correct exiled cards and instances.",
        "acceptance": [
          "Exiled-card references resolve only to the card exiled by the same source instance.",
          "Multiple instances of the same permanent maintain separate linkages.",
          "Replays store link IDs for auditability."
        ],
        "fr_ids": ["FR-LINK-001"],
        "nfr_category": "maintainability",
        "nfr_target": "Link resolution in < 0.5ms p95.",
        "component": "rules",
        "cr_refs": "§607",
        "deps": ["Link: Move Object API", "Link: Layers Engine"],
        "dod": [
          "Link ID scheme documented",
          "Unit tests: adventure/imprint"
        ]
      }
    },
    {
      "title": "Feature: Split / Adventure / Modal Double-Faced Cards",
      "labels": ["Type: Feature", "Epic: CR §708–711 Advanced Card Types"],
      "body": {
        "description": "Minimal handling for split cards, adventure spells, and MDFCs: face/mode selection, characteristics on the stack, and zone-change behaviors.",
        "acceptance": [
          "Chosen half/mode/adventure is serialized and respected across casting and resolution.",
          "MDFC face orientation persists per CR rules across zones.",
          "Illegal face/mode choices blocked with reason."
        ],
        "fr_ids": ["FR-ADV-002"],
        "nfr_category": "reliability",
        "nfr_target": "Zero invalid mode/face states in fuzz.",
        "component": "rules",
        "cr_refs": "§708, §711, §715",
        "deps": ["Link: Casting Pipeline & Costs", "Link: Special Actions & Face-Down/Modal/DFC Handling"],
        "dod": [
          "Fixtures for split/adventure/MDFC",
          "Replay markers for face/mode"
        ]
      }
    },
    {
      "title": "Feature: Damage & Life System (Life Loss, Prevent, Replace)",
      "labels": ["Type: Feature", "Epic: CR §119 Damage / §120 Life]",
      "body": {
        "description": "Unified damage system (combat and non-combat), life gain/loss, prevention and replacement hooks, and lethal checks.",
        "acceptance": [
          "Damage carries sources, timestamps, and combat flag.",
          "Prevention and redirection effects apply via the replacement framework.",
          "Life total updates are atomic and observable."
        ],
        "fr_ids": ["FR-DMG-001"],
        "nfr_category": "observability",
        "nfr_target": "100% of damage events include source and combat flag.",
        "component": "rules",
        "cr_refs": "§119–120, §614–616",
        "deps": ["Link: Replacement/Prevention/Redirection Framework", "Link: Combat Damage Assignment"],
        "dod": [
          "Golden tests for damage math",
          "Replay: damage ledger view"
        ]
      }
    },
    {
      "title": "Feature: Determinism Watchdog & Drift Detection",
      "labels": ["Type: Feature", "Epic: Observability"],
      "body": {
        "description": "Compare replay hashes across CI runs, alert on divergence, and surface differing segments for triage.",
        "acceptance": [
          "CI fails on deterministic drift with actionable diff output.",
          "Segmented diff shows first divergence index and event types.",
          "Alert routes to owners with runbook link."
        ],
        "fr_ids": ["FR-OBS-002"],
        "nfr_category": "operability",
        "nfr_target": "Detection within 1 run; triage time < 15m median.",
        "component": "observability",
        "cr_refs": "N/A",
        "deps": ["Link: Deterministic RNG & Replay Serializer"],
        "dod": [
          "Hashing/compare tool in repo",
          "Runbook for common root causes"
        ]
      }
    },
    {
      "title": "Feature: Golden & Property-Based Test Harness",
      "labels": ["Type: Feature", "Epic: CI/CD & Environments"],
      "body": {
        "description": "Add golden-replay tests and property-based fuzzing for rules invariants (e.g., ID continuity, zone legality, SBA termination).",
        "acceptance": [
          "At least 20 golden scenarios covering core rules.",
          "Fuzzer finds no illegal state in 10k steps on CI.",
          "Failures produce minimized counterexamples."
        ],
        "fr_ids": ["FR-CICD-002"],
        "nfr_category": "reliability",
        "nfr_target": "False-positive rate < 1% over 100 CI runs.",
        "component": "devops",
        "cr_refs": "N/A",
        "deps": ["Link: Move Object API", "Link: SBA Scanner"],
        "dod": [
          "Golden fixtures folder",
          "CI job with seed pinning"
        ]
      }
    },
    {
      "title": "Feature: Replay Viewer — Annotations & Explainability Overlay",
      "labels": ["Type: Feature", "Epic: Replay Logger & Viewer / Explanation Service"],
      "body": {
        "description": "Display inline annotations from the Explanation Service (rationales, value estimates, chosen actions) over the replay timeline.",
        "acceptance": [
          "Hover or click shows rationale and key features for the action.",
          "Performance remains ≥ 60 FPS on sample replays.",
          "Accessibility labels present for annotations."
        ],
        "fr_ids": ["FR-UI-002"],
        "nfr_category": "usability",
        "nfr_target": "Overlay adds < 10% render overhead.",
        "component": "ui",
        "cr_refs": "N/A",
        "deps": ["Link: Explanation Service", "Link: Minimal Web Replay Viewer"],
        "dod": [
          "API contract with explanation-service",
          "E2E tests with sample rationales"
        ]
      }
    },
    {
      "title": "Feature: Explanation Service — Rationale Synthesis",
      "labels": ["Type: Feature", "Epic: Explanation Service"],
      "body": {
        "description": "Generate concise human-readable rationales from state/action/value signals with templated narratives and safety redaction.",
        "acceptance": [
          "≥ 80% of actions have an attached rationale.",
          "Latency overhead < 5% of sim time.",
          "Redacts hidden information in opponent views."
        ],
        "fr_ids": ["FR-EXPL-001"],
        "nfr_category": "performance",
        "nfr_target": "Rationale generation < 2ms p95 per action.",
        "component": "explain",
        "cr_refs": "§109 (hidden information)",
        "deps": ["Link: Agent Service", "Link: Replay Logger"],
        "dod": [
          "Template library created",
          "Observer-mask aware output"
        ]
      }
    },
    {
      "title": "Feature: Distributed Simulation Client — Job Protocol & Sandbox",
      "labels": ["Type: Feature", "Epic: Distributed Simulation Client"],
      "body": {
        "description": "Design a signed job protocol, sandboxed execution container, and integrity checks to accept/run/return simulation jobs from volunteers.",
        "acceptance": [
          "Jobs are signed and verified before execution.",
          "Results include checksum and provenance data.",
          "Quarantine flow for suspected bad clients exists and is tested."
        ],
        "fr_ids": ["FR-DIST-001"],
        "nfr_category": "security",
        "nfr_target": "Zero unsigned job executions; integrity checks on 100% results.",
        "component": "distributed",
        "cr_refs": "N/A",
        "deps": ["Link: Security Baseline & Fan Content Compliance", "Link: Simulation Engine"],
        "dod": [
          "Threat model doc",
          "E2E test across two nodes"
        ]
      }
    },
    {
      "title": "Feature: UI Dashboard — Queues, Pods, Metrics",
      "labels": ["Type: Feature", "Epic: UI Client & Public Web"],
      "body": {
        "description": "Operational dashboard for queue depth, pod creation, throughput, determinism SLOs, and recent replays.",
        "acceptance": [
          "Real-time queue lengths and pod formation rates visible.",
          "Determinism SLO and error budget burn displayed.",
          "Link-outs to replays and logs from incidents."
        ],
        "fr_ids": ["FR-UI-003"],
        "nfr_category": "usability",
        "nfr_target": "Dashboard TTI < 3s, p95 refresh < 1s.",
        "component": "ui",
        "cr_refs": "N/A",
        "deps": ["Link: Observability Baseline", "Link: Matchmaker — Power-Balanced Pod Formation"],
        "dod": [
          "Grafana panels embedded or custom charts",
          "Auth (if needed) configured"
        ]
      }
    },
    {
      "title": "Feature: Archetype Tagger & Taxonomy",
      "labels": ["Type: Feature", "Epic: Value Index Service"],
      "body": {
        "description": "Define and apply a Commander archetype taxonomy (e.g., Stax, Turbo-Nauss, Midrange, Voltron, Combo), tagging decks via heuristics/rules.",
        "acceptance": [
          "Archetype tags generated for ≥ 90% of sample decks.",
          "Manual spot-check agreement ≥ 80% on labeled set.",
          "Tags exposed via Value Index API responses."
        ],
        "fr_ids": ["FR-VI-002"],
        "nfr_category": "maintainability",
        "nfr_target": "Rules-based tag updates via config without code changes.",
        "component": "ranking",
        "cr_refs": "N/A",
        "deps": ["Link: Deck Validator", "Link: Scryfall ETL — Bulk Ingest & Deltas"],
        "dod": [
          "Taxonomy doc",
          "Evaluation/labeling notebook"
        ]
      }
    },
    {
      "title": "Feature: Kafka Exactly-Once/Idempotence Strategy",
      "labels": ["Type: Feature", "Epic: Kafka Event Mesh"],
      "body": {
        "description": "Document and implement idempotent producers, transactional writes where appropriate, and consumer idempotence for replay safety.",
        "acceptance": [
          "At-least-once delivery does not create duplicate state transitions (idempotent consumers).",
          "Transactional boundaries documented for critical topics.",
          "Chaos test demonstrates safe recovery from producer restarts."
        ],
        "fr_ids": ["FR-KAFKA-002"],
        "nfr_category": "reliability",
        "nfr_target": "Zero duplicate-visible replays across chaos tests.",
        "component": "messaging",
        "cr_refs": "N/A",
        "deps": ["Link: Kafka Topic Contracts", "Link: Replay Logger & Search Index"],
        "dod": [
          "Consumer idempotence spec",
          "Transactional test suite"
        ]
      }
    },
    {
      "title": "Feature: Secrets & Provenance (SLSA/Sigstore)",
      "labels": ["Type: Feature", "Epic: Security & Compliance"],
      "body": {
        "description": "Manage secrets via GitHub OIDC/Azure Key Vault; sign container images and produce attestation (SLSA) for supply-chain integrity.",
        "acceptance": [
          "No long-lived credentials stored in repo.",
          "All release images signed; attestations attached.",
          "Provenance verified in CI/CD before deploy."
        ],
        "fr_ids": ["FR-SEC-002"],
        "nfr_category": "security",
        "nfr_target": "100% artifact signing; failed verification blocks deploy.",
        "component": "security",
        "cr_refs": "N/A",
        "deps": ["Link: CI/CD Pipeline (Docker, Helm, AKS)"],
        "dod": [
          "Key rotation SOP",
          "Verification gate in pipeline"
        ]
      }
    }
  ]
}
{
  "tasks": [
    /* =========================
       Feature 1: Commander Game Setup
       ========================= */
    {
      "title": "Commander Game Setup: Design & Plan",
      "labels": ["Type: Task", "Design", "Feature: Commander Game Setup (APNAP, Starting Life, Partners)"],
      "feature_ref": "Feature: Commander Game Setup (APNAP, Starting Life, Partners)",
      "body": {
        "description": "Draft the Commander setup FSM: player seating, APNAP, 40 life, command zone init, partner validation; define seed usage and replay ordering.",
        "acceptance": [
          "Mini-ADR merged with FSM diagram and ordered event sequence.",
          "APNAP and first-player rules captured with 4-player examples.",
          "Edge cases listed (singleton violations, illegal partner pair)."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§100–104, §903",
        "deps": []
      }
    },
    {
      "title": "Commander Game Setup: Implementation",
      "labels": ["Type: Task", "Implementation", "Feature: Commander Game Setup (APNAP, Starting Life, Partners)"],
      "feature_ref": "Feature: Commander Game Setup (APNAP, Starting Life, Partners)",
      "body": {
        "description": "Implement setup FSM with deterministic RNG hooks, command zone init, partner checks, and APNAP ordering emissions.",
        "acceptance": [
          "Given a fixed seed, initial states are bitwise-identical.",
          "Illegal partner/color-identity pairs rejected with actionable errors.",
          "Replay contains ordered setup events with player indices."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§100–104, §903",
        "deps": ["Commander Game Setup: Design & Plan"]
      }
    },
    {
      "title": "Commander Game Setup: Testing",
      "labels": ["Type: Task", "Testing", "Feature: Commander Game Setup (APNAP, Starting Life, Partners)"],
      "feature_ref": "Feature: Commander Game Setup (APNAP, Starting Life, Partners)",
      "body": {
        "description": "Unit and property tests plus golden replay(s) for Commander setup sequence, APNAP, and partner validation.",
        "acceptance": [
          "Golden setup replay hash stable across 100 runs (fixed seed).",
          "Unit/property tests cover APNAP ordering, illegal partner/color identity.",
          "CI job green; failures show minimal repro."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§100–104, §903",
        "deps": ["Commander Game Setup: Implementation"]
      }
    },
    {
      "title": "Commander Game Setup: Observability",
      "labels": ["Type: Task", "Observability", "Feature: Commander Game Setup (APNAP, Starting Life, Partners)"],
      "feature_ref": "Feature: Commander Game Setup (APNAP, Starting Life, Partners)",
      "body": {
        "description": "Instrument setup with OTel spans/metrics and add Grafana panels for seed, seating, and command zone init.",
        "acceptance": [
          "Spans emitted for seating, life init, command zone init (with player_id).",
          "Metrics for setup duration and failures exported.",
          "Dashboard panel(s) added and linked from runbook."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "N/A",
        "deps": ["Commander Game Setup: Implementation"]
      }
    },
    {
      "title": "Commander Game Setup: Documentation",
      "labels": ["Type: Task", "Docs", "Feature: Commander Game Setup (APNAP, Starting Life, Partners)"],
      "feature_ref": "Feature: Commander Game Setup (APNAP, Starting Life, Partners)",
      "body": {
        "description": "Document Commander setup FSM, APNAP, partner rules, and troubleshooting.",
        "acceptance": [
          "Docs page published with FSM diagram and examples.",
          "Links to CR §100–104, §903 and deck validator section.",
          "Troubleshooting section includes top 5 errors."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§100–104, §903",
        "deps": ["Commander Game Setup: Implementation"]
      }
    },

    /* =========================
       Feature 2: Mulligan (Commander)
       ========================= */
    {
      "title": "Mulligan (Commander): Design & Plan",
      "labels": ["Type: Task", "Design", "Feature: Mulligan (Vancouver/London for Commander)"],
      "feature_ref": "Feature: Mulligan (Vancouver/London for Commander)",
      "body": {
        "description": "Define Commander mulligan policy (London) with APNAP sequencing, bottom-of-library, and replay serialization.",
        "acceptance": [
          "Design note merged with sequence diagrams and prompts.",
          "Edge cases listed (no lands, reveal policies).",
          "Test plan covers 0–N mulligans and bottomed cards accounting."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§103, EDH mulligan",
        "deps": []
      }
    },
    {
      "title": "Mulligan (Commander): Implementation",
      "labels": ["Type: Task", "Implementation", "Feature: Mulligan (Vancouver/London for Commander)"],
      "feature_ref": "Feature: Mulligan (Vancouver/London for Commander)",
      "body": {
        "description": "Implement Commander mulligan flow with APNAP ordering, hand-size adjustments, and bottom-of-library mechanics.",
        "acceptance": [
          "APNAP mulligan rounds proceed until all keep.",
          "Replay captures bottomed cards counts and final hand sizes.",
          "Illegal extra-draws prevented; errors actionable."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§103",
        "deps": ["Mulligan (Commander): Design & Plan", "Commander Game Setup: Implementation"]
      }
    },
    {
      "title": "Mulligan (Commander): Testing",
      "labels": ["Type: Task", "Testing", "Feature: Mulligan (Vancouver/London for Commander)"],
      "feature_ref": "Feature: Mulligan (Vancouver/London for Commander)",
      "body": {
        "description": "Create unit tests for 0–N mulligans, APNAP order, and golden replays capturing bottomed cards.",
        "acceptance": [
          "Golden tests for 0–3 mulligans pass; hashes stable.",
          "Illegal extra draws prevented and asserted.",
          "CI job green with coverage noted."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§103",
        "deps": ["Mulligan (Commander): Implementation"]
      }
    },
    {
      "title": "Mulligan (Commander): Observability",
      "labels": ["Type: Task", "Observability", "Feature: Mulligan (Vancouver/London for Commander)"],
      "feature_ref": "Feature: Mulligan (Vancouver/London for Commander)",
      "body": {
        "description": "Emit spans for mulligan rounds and metrics for latency and counts; add dashboard visualization.",
        "acceptance": [
          "Spans for each round with kept flag and hand size.",
          "Metrics: rounds per game, per-player latency.",
          "Grafana panel added; alert on abnormal latency."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "N/A",
        "deps": ["Mulligan (Commander): Implementation"]
      }
    },
    {
      "title": "Mulligan (Commander): Documentation",
      "labels": ["Type: Task", "Docs", "Feature: Mulligan (Vancouver/London for Commander)"],
      "feature_ref": "Feature: Mulligan (Vancouver/London for Commander)",
      "body": {
        "description": "Write policy docs and user/dev walkthroughs for Commander mulligans.",
        "acceptance": [
          "Docs include APNAP sequence and examples.",
          "Replay screenshots annotated for bottomed cards.",
          "Linked from Feature and troubleshooting index."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§103",
        "deps": ["Mulligan (Commander): Implementation"]
      }
    },

    /* =========================
       Feature 3: Color & Mana Representation
       ========================= */
    {
      "title": "Color & Mana Representation: Design & Plan",
      "labels": ["Type: Task", "Design", "Feature: Color & Mana Representation"],
      "feature_ref": "Feature: Color & Mana Representation",
      "body": {
        "description": "Specify symbol taxonomy (hybrid, phyrexian, snow, colorless), color identity check rules, and mana pool lifecycle.",
        "acceptance": [
          "Symbol table and color identity ruleset documented.",
          "Cost parsing rules for hybrid/phyrexian with examples.",
          "Perf microbench plan added."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§105–107, §202",
        "deps": []
      }
    },
    {
      "title": "Color & Mana Representation: Implementation",
      "labels": ["Type: Task", "Implementation", "Feature: Color & Mana Representation"],
      "feature_ref": "Feature: Color & Mana Representation",
      "body": {
        "description": "Implement canonical color/mana types, symbol parsing, color identity validation, and mana pool operations.",
        "acceptance": [
          "All Scryfall symbols map to tokens; parser returns structured errors.",
          "Color identity validator passes on 100 EDH sample decks.",
          "Mana pool supports floating and cleanup semantics."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§105–107, §202",
        "deps": ["Color & Mana Representation: Design & Plan", "CardIR Parser & Normalizer: Implementation"]
      }
    },
    {
      "title": "Color & Mana Representation: Testing",
      "labels": ["Type: Task", "Testing", "Feature: Color & Mana Representation"],
      "feature_ref": "Feature: Color & Mana Representation",
      "body": {
        "description": "Unit tests for symbol parsing (hybrid/phyrexian/snow), color identity, and mana pool lifecycle.",
        "acceptance": [
          "Parser tests cover all symbol classes with negatives.",
          "Color identity tests pass on 100 EDH sample decks.",
          "Pool cleanup semantics verified at step boundaries."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§105–107, §202",
        "deps": ["Color & Mana Representation: Implementation"]
      }
    },
    {
      "title": "Color & Mana Representation: Observability",
      "labels": ["Type: Task", "Observability", "Feature: Color & Mana Representation"],
      "feature_ref": "Feature: Color & Mana Representation",
      "body": {
        "description": "Add debug spans/counters for mana addition/consumption and symbol parsing failures; microbench panel.",
        "acceptance": [
          "Counters for mana add/spend exposed.",
          "Parser failures produce structured logs with card refs.",
          "Perf panel shows p95 < 1ms per op."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "N/A",
        "deps": ["Color & Mana Representation: Implementation"]
      }
    },
    {
      "title": "Color & Mana Representation: Documentation",
      "labels": ["Type: Task", "Docs", "Feature: Color & Mana Representation"],
      "feature_ref": "Feature: Color & Mana Representation",
      "body": {
        "description": "Document symbol taxonomy, color identity rules, and examples.",
        "acceptance": [
          "Glossary of symbols with examples published.",
          "Color identity doc includes EDH nuances.",
          "Links added in CardIR spec."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§105–107, §202",
        "deps": ["Color & Mana Representation: Implementation"]
      }
    },

    /* =========================
       Feature 4: Object Identity & Zones Core
       ========================= */
    {
      "title": "Object Identity & Zones Core: Design & Plan",
      "labels": ["Type: Task", "Design", "Feature: Object Identity & Zones Core"],
      "feature_ref": "Feature: Object Identity & Zones Core",
      "body": {
        "description": "Define object ID scheme, ownership vs control model, zone graph, and visibility masks for hidden/public info.",
        "acceptance": [
          "ID continuity strategy documented.",
          "Zone graph and visibility matrix published.",
          "Test plan for hidden info masking added."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§108–111, §400",
        "deps": []
      }
    },
    {
      "title": "Object Identity & Zones Core: Implementation",
      "labels": ["Type: Task", "Implementation", "Feature: Object Identity & Zones Core"],
      "feature_ref": "Feature: Object Identity & Zones Core",
      "body": {
        "description": "Implement object IDs, zone containers, and visibility masks with command zone semantics.",
        "acceptance": [
          "IDs remain stable across zone changes; no orphan IDs in 100k events.",
          "Hidden information correctly masked in observations.",
          "Command zone rules applied for commanders."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§108–111, §400",
        "deps": ["Object Identity & Zones Core: Design & Plan", "Move Object API: Implementation"]
      }
    },
    {
      "title": "Object Identity & Zones Core: Testing",
      "labels": ["Type: Task", "Testing", "Feature: Object Identity & Zones Core"],
      "feature_ref": "Feature: Object Identity & Zones Core",
      "body": {
        "description": "Fuzz and unit tests for ID continuity, zone transitions, and visibility masks including command zone.",
        "acceptance": [
          "100k-event fuzz shows 0 orphan IDs.",
          "Visibility masking tests pass for hidden zones.",
          "Command zone semantics validated."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§108–111, §400",
        "deps": ["Object Identity & Zones Core: Implementation"]
      }
    },
    {
      "title": "Object Identity & Zones Core: Observability",
      "labels": ["Type: Task", "Observability", "Feature: Object Identity & Zones Core"],
      "feature_ref": "Feature: Object Identity & Zones Core",
      "body": {
        "description": "Emit movement/visibility logs; counters for zone transitions; dashboard with top movement reasons.",
        "acceptance": [
          "Movement spans include reason and LKI flag.",
          "Transition counters tagged by zone pair.",
          "Panel lists top N movement reasons."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "N/A",
        "deps": ["Object Identity & Zones Core: Implementation"]
      }
    },
    {
      "title": "Object Identity & Zones Core: Documentation",
      "labels": ["Type: Task", "Docs", "Feature: Object Identity & Zones Core"],
      "feature_ref": "Feature: Object Identity & Zones Core",
      "body": {
        "description": "Document ID scheme, zone graph, visibility matrix, and examples.",
        "acceptance": [
          "Zone/visibility diagrams published.",
          "Examples for command zone interactions.",
          "Cross-links to Move API doc."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§108–111, §400",
        "deps": ["Object Identity & Zones Core: Implementation"]
      }
    },

    /* =========================
       Feature 5: Priority System & Pass Cycles
       ========================= */
    {
      "title": "Priority System & Pass Cycles: Design & Plan",
      "labels": ["Type: Task", "Design", "Feature: Priority System & Pass Cycles"],
      "feature_ref": "Feature: Priority System & Pass Cycles",
      "body": {
        "description": "Model APNAP priority windows, pass cycles, and termination rules; interactions with stack creation/resolution.",
        "acceptance": [
          "ADR with FSM and APNAP examples merged.",
          "Illegal timing actions enumerated.",
          "Integration test plan with stack scenarios added."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§117",
        "deps": []
      }
    },
    {
      "title": "Priority System & Pass Cycles: Implementation",
      "labels": ["Type: Task", "Implementation", "Feature: Priority System & Pass Cycles"],
      "feature_ref": "Feature: Priority System & Pass Cycles",
      "body": {
        "description": "Implement priority give/pass API, window enforcement, and APNAP sequencing for multiplayer.",
        "acceptance": [
          "Pass cycles terminate only when legal; stack/empty checks correct.",
          "No illegal timing actions admitted.",
          "Trace output matches designed sequence."
        ],
        "component": "rules",
        "risk": "high",
        "determinism": "required",
        "cr_refs": "§117",
        "deps": ["Priority System & Pass Cycles: Design & Plan", "Stack Resolution & Targets: Implementation"]
      }
    },
    {
      "title": "Priority System & Pass Cycles: Testing",
      "labels": ["Type: Task", "Testing", "Feature: Priority System & Pass Cycles"],
      "feature_ref": "Feature: Priority System & Pass Cycles",
      "body": {
        "description": "Unit/property tests and golden traces for APNAP pass cycles in 2p and 4p with stack interactions.",
        "acceptance": [
          "Golden traces stable across 100 seeds.",
          "Property: no actions admitted when window closed.",
          "APNAP ordering verified by assertions."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§117",
        "deps": ["Priority System & Pass Cycles: Implementation"]
      }
    },
    {
      "title": "Priority System & Pass Cycles: Observability",
      "labels": ["Type: Task", "Observability", "Feature: Priority System & Pass Cycles"],
      "feature_ref": "Feature: Priority System & Pass Cycles",
      "body": {
        "description": "Add spans `priority.give`/`priority.pass` and metrics for pass cycles and window violations; dashboard panel.",
        "acceptance": [
          "Spans include player_id, window_id; no missing attrs.",
          "Metric: cycles per step; violations counter present.",
          "Panel visualizes pass cycles over time."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "N/A",
        "deps": ["Priority System & Pass Cycles: Implementation"]
      }
    },
    {
      "title": "Priority System & Pass Cycles: Documentation",
      "labels": ["Type: Task", "Docs", "Feature: Priority System & Pass Cycles"],
      "feature_ref": "Feature: Priority System & Pass Cycles",
      "body": {
        "description": "Author timing/priority guide including APNAP, pass cycles, and troubleshooting.",
        "acceptance": [
          "Guide includes diagrams and example traces.",
          "References CR §117 and stack interactions.",
          "Added to /docs navigation with tags."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§117",
        "deps": ["Priority System & Pass Cycles: Implementation"]
      }
    },

    /* =========================
       Feature 6: Turn/Step Scheduler
       ========================= */
    {
      "title": "Turn/Step Scheduler: Design & Plan",
      "labels": ["Type: Task", "Design", "Feature: Turn/Step Scheduler"],
      "feature_ref": "Feature: Turn/Step Scheduler",
      "body": {
        "description": "Define scheduler state machine for phases/steps, trigger windows, cleanup ordering, and hook points.",
        "acceptance": [
          "Design doc includes per-step hooks and trigger windows.",
          "Cleanup and hand-size checks specified.",
          "Test matrix for all steps prepared."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§500–511, §514–515",
        "deps": []
      }
    },
    {
      "title": "Turn/Step Scheduler: Implementation",
      "labels": ["Type: Task", "Implementation", "Feature: Turn/Step Scheduler"],
      "feature_ref": "Feature: Turn/Step Scheduler",
      "body": {
        "description": "Implement step/phase scheduler with deterministic ordering and hooks for triggers and SBA checks.",
        "acceptance": [
          "All steps executed in CR order with markers.",
          "Cleanup applies SBA and hand-size rules.",
          "Hooks correctly invoke trigger engine."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§500–511, §514–515",
        "deps": ["Turn/Step Scheduler: Design & Plan", "State-Based Actions Scanner: Implementation", "Trigger Engine & Event Bus: Implementation"]
      }
    },
    {
      "title": "Turn/Step Scheduler: Testing",
      "labels": ["Type: Task", "Testing", "Feature: Turn/Step Scheduler"],
      "feature_ref": "Feature: Turn/Step Scheduler",
      "body": {
        "description": "Per-step unit tests and golden replays verifying order, triggers, cleanup, and SBA hooks.",
        "acceptance": [
          "Unit tests per step pass; golden replays stable.",
          "Cleanup enforces hand-size and SBA checks.",
          "Trigger windows verified in tests."
        ],
        "component": "rules",
        "risk": "medium",
        "determinism": "required",
        "cr_refs": "§500–511, §514–515",
        "deps": ["Turn/Step Scheduler: Implementation"]
      }
    },
    {
      "title": "Turn/Step Scheduler: Observability",
      "labels": ["Type: Task", "Observability", "Feature: Turn/Step Scheduler"],
      "feature_ref": "Feature: Turn/Step Scheduler",
      "body": {
        "description": "Emit spans for step transitions and metrics for step durations; add dashboard timeline.",
        "acceptance": [
          "Spans include phase/step names and turn owner.",
          "Metrics: per-step duration exported.",
          "Timeline panel visible in Grafana."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "N/A",
        "deps": ["Turn/Step Scheduler: Implementation"]
      }
    },
    {
      "title": "Turn/Step Scheduler: Documentation",
      "labels": ["Type: Task", "Docs", "Feature: Turn/Step Scheduler"],
      "feature_ref": "Feature: Turn/Step Scheduler",
      "body": {
        "description": "Document scheduler design with sequence charts, hook points, and examples.",
        "acceptance": [
          "Sequence diagrams per step included.",
          "List of hook points and usage examples.",
          "Cross-links to Trigger Engine and SBA docs."
        ],
        "component": "rules",
        "risk": "low",
        "determinism": "required",
        "cr_refs": "§500–511, §514–515",
        "deps": ["Turn/Step Scheduler: Implementation"]
      }
    }
  ]
}
